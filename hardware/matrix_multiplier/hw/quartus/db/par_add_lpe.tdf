--parallel_add DEVICE_FAMILY="Cyclone V" MSW_SUBTRACT="NO" PIPELINE=0 REPRESENTATION="UNSIGNED" RESULT_ALIGNMENT="LSB" SHIFT=1 SIZE=16 WIDTH=16 WIDTHR=32 data result
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:09:SJ cbx_lpm_add_sub 2018:09:12:13:04:09:SJ cbx_mgl 2018:09:12:14:15:07:SJ cbx_nadder 2018:09:12:13:04:09:SJ cbx_padd 2018:09:12:13:04:09:SJ cbx_parallel_add 2018:09:12:13:04:09:SJ cbx_stratix 2018:09:12:13:04:09:SJ cbx_stratixii 2018:09:12:13:04:09:SJ cbx_util_mgl 2018:09:12:13:04:09:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.


FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 286 
SUBDESIGN par_add_lpe
( 
	data[255..0]	:	input;
	result[31..0]	:	output;
) 
VARIABLE
	add1_result[30..0]	:	WIRE;
	add11_result[23..0]	:	WIRE;
	add16_result[19..0]	:	WIRE;
	add21_result[15..0]	:	WIRE;
	add26_result[11..0]	:	WIRE;
	add31_result[7..0]	:	WIRE;
	add36_result[3..0]	:	WIRE;
	add6_result[27..0]	:	WIRE;
	sft10a[27..0] : soft;
	sft12a[23..0] : soft;
	sft13a[23..0] : soft;
	sft14a[23..0] : soft;
	sft15a[23..0] : soft;
	sft17a[19..0] : soft;
	sft18a[19..0] : soft;
	sft19a[19..0] : soft;
	sft20a[19..0] : soft;
	sft22a[15..0] : soft;
	sft23a[15..0] : soft;
	sft24a[15..0] : soft;
	sft25a[15..0] : soft;
	sft27a[11..0] : soft;
	sft28a[11..0] : soft;
	sft29a[11..0] : soft;
	sft2a[30..0] : soft;
	sft30a[11..0] : soft;
	sft32a[7..0] : soft;
	sft33a[7..0] : soft;
	sft34a[7..0] : soft;
	sft35a[7..0] : soft;
	sft37a[3..0] : soft;
	sft38a[3..0] : soft;
	sft39a[3..0] : soft;
	sft3a[30..0] : soft;
	sft40a[3..0] : soft;
	sft4a[30..0] : soft;
	sft5a[30..0] : soft;
	sft7a[27..0] : soft;
	sft8a[27..0] : soft;
	sft9a[27..0] : soft;
	w417w	: WIRE;
	w981w[31..0]	: WIRE;

BEGIN 
	add1_result[] = sft2a[].out + sft3a[].out + sft4a[].out;
	add11_result[] = sft12a[].out + sft13a[].out + sft14a[].out;
	add16_result[] = sft17a[].out + sft18a[].out + sft19a[].out;
	add21_result[] = sft22a[].out + sft23a[].out + sft24a[].out;
	add26_result[] = sft27a[].out + sft28a[].out + sft29a[].out;
	add31_result[] = sft32a[].out + sft33a[].out + sft34a[].out;
	add36_result[] = sft37a[].out + sft38a[].out + sft39a[].out;
	add6_result[] = sft7a[].out + sft8a[].out + sft9a[].out;
	sft10a[].in = add6_result[];
	sft12a[].in = ( w417w, ( w417w, ( data[191..191], ( data[250..250], ( data[234..234], ( data[218..218], ( data[202..202], ( data[201..201], ( data[215..215], ( data[154..154], ( data[138..138], ( data[167..167], ( data[241..241], ( data[90..90], ( data[89..89], ( data[88..88], ( data[87..87], ( data[86..86], ( data[85..85], ( data[84..84], ( data[83..83], ( data[82..82], ( data[81..80])))))))))))))))))))))));
	sft13a[].in = ( w417w, ( w417w, ( data[206..206], ( data[190..190], ( data[174..174], ( data[158..158], ( data[187..187], ( data[126..126], ( data[95..95], ( data[94..94], ( data[78..78], ( sft30a[6..6].out, ( sft30a[5..5].out, ( data[30..30], ( data[29..29], ( data[28..28], ( data[27..27], ( data[26..26], ( data[25..25], ( data[24..24], ( data[23..23], ( data[22..22], ( data[21..20])))))))))))))))))))))));
	sft14a[].in = ( w417w, ( w417w, ( w417w, ( data[175..175], ( w417w, ( data[233..233], ( sft30a[11..11].out, ( sft30a[10..10].out, ( sft30a[9..9].out, ( sft30a[8..8].out, ( sft30a[7..7].out, ( sft35a[4..4].out, ( sft40a[1..1].out, ( sft35a[2..2].out, ( sft30a[3..3].out, ( sft30a[2..2].out, ( sft30a[1..1].out, ( sft30a[0..0].out, ( data[100..100], ( data[99..99], ( data[98..98], ( data[97..97], ( data[96..96], w417w)))))))))))))))))))))));
	sft15a[].in = add11_result[];
	sft17a[].in = ( w417w, ( w417w, ( data[159..159], ( data[248..248], ( data[232..232], ( data[216..216], ( data[200..200], ( data[199..199], ( data[183..183], ( data[152..152], ( data[136..136], ( data[120..120], ( data[119..119], ( data[118..118], ( data[117..117], ( data[116..116], ( data[115..115], ( data[114..114], ( data[113..112])))))))))))))))))));
	sft18a[].in = ( w417w, ( w417w, ( data[249..249], ( data[143..143], ( data[127..127], ( data[111..111], ( data[185..185], ( data[79..79], ( sft35a[5..5].out, ( data[47..47], ( data[31..31], ( data[15..15], ( data[14..14], ( data[13..13], ( data[12..12], ( data[11..11], ( data[10..10], ( data[9..9], ( data[8..7])))))))))))))))))));
	sft19a[].in = ( w417w, ( w417w, ( sft25a[15..15].out, ( data[188..188], ( data[247..247], ( data[231..231], ( sft35a[7..7].out, ( sft35a[6..6].out, ( sft40a[3..3].out, ( sft40a[2..2].out, ( sft35a[3..3].out, ( sft40a[0..0].out, ( sft35a[1..1].out, ( sft35a[0..0].out, ( data[132..132], ( data[131..131], ( data[130..130], ( data[129..129], ( data[128..128], w417w)))))))))))))))))));
	sft20a[].in = add16_result[];
	sft22a[].in = ( w417w, ( w417w, ( data[172..172], ( data[246..246], ( data[230..230], ( data[214..214], ( data[198..198], ( data[182..182], ( data[166..166], ( data[150..150], ( data[149..149], ( data[148..148], ( data[147..147], ( data[146..146], ( data[145..144])))))))))))))));
	sft23a[].in = ( w417w, ( w417w, ( data[157..157], ( data[171..171], ( data[155..155], ( data[139..139], ( data[123..123], ( data[107..107], ( data[91..91], ( data[75..75], ( data[74..74], ( data[73..73], ( data[72..72], ( data[71..71], ( data[70..69])))))))))))))));
	sft24a[].in = ( w417w, ( w417w, ( w417w, ( data[186..186], ( data[245..245], ( data[229..229], ( data[213..213], ( data[197..197], ( data[181..181], ( data[165..165], ( data[164..164], ( data[163..163], ( data[162..162], ( data[161..161], ( data[160..160], w417w)))))))))))))));
	sft25a[].in = add21_result[];
	sft27a[].in = ( w417w, ( w417w, ( data[170..170], ( data[244..244], ( data[228..228], ( data[212..212], ( data[196..196], ( data[240..240], ( data[179..179], ( data[178..178], ( data[177..176])))))))))));
	sft28a[].in = ( w417w, ( w417w, ( data[110..110], ( data[169..169], ( data[153..153], ( data[137..137], ( data[121..121], ( data[45..45], ( data[104..104], ( data[103..103], ( data[102..101])))))))))));
	sft29a[].in = ( w417w, ( w417w, ( w417w, ( data[184..184], ( data[243..243], ( data[227..227], ( data[211..211], ( data[225..225], ( data[194..194], ( data[193..193], ( data[192..192], w417w)))))))))));
	sft2a[].in = ( w417w, ( data[255..255], ( data[239..239], ( data[253..253], ( data[222..222], ( sft10a[23..23].out, ( sft10a[22..22].out, ( sft10a[21..21].out, ( sft10a[20..20].out, ( sft10a[19..19].out, ( sft10a[18..18].out, ( sft10a[17..17].out, ( sft10a[16..16].out, ( sft10a[15..15].out, ( sft10a[14..14].out, ( sft10a[13..13].out, ( sft10a[12..12].out, ( sft10a[11..11].out, ( sft10a[10..10].out, ( sft10a[9..9].out, ( sft10a[8..8].out, ( sft10a[7..7].out, ( sft10a[6..6].out, ( sft10a[5..5].out, ( sft10a[4..4].out, ( data[6..6], ( data[5..5], ( data[4..4], ( data[3..3], ( data[2..1]))))))))))))))))))))))))))))));
	sft30a[].in = add26_result[];
	sft32a[].in = ( w417w, ( w417w, ( data[168..168], ( data[122..122], ( data[226..226], ( data[180..180], ( data[209..208])))))));
	sft33a[].in = ( w417w, ( w417w, ( data[63..63], ( data[62..62], ( w417w, ( data[105..105], ( data[134..133])))))));
	sft34a[].in = ( w417w, ( w417w, ( w417w, ( data[242..242], ( w417w, ( data[195..195], ( data[224..224], w417w)))))));
	sft35a[].in = add31_result[];
	sft37a[].in = ( w417w, ( w417w, ( data[106..106], data[210..210])));
	sft38a[].in = ( w417w, ( w417w, ( data[46..46], data[135..135])));
	sft39a[].in = ( w417w, ( w417w, ( data[151..151], w417w)));
	sft3a[].in = ( w417w, ( sft10a[27..27].out, ( data[254..254], ( sft10a[25..25].out, ( sft10a[24..24].out, ( sft15a[21..21].out, ( sft15a[20..20].out, ( sft15a[19..19].out, ( sft15a[18..18].out, ( sft15a[17..17].out, ( sft15a[16..16].out, ( sft15a[15..15].out, ( sft15a[14..14].out, ( sft15a[13..13].out, ( sft15a[12..12].out, ( sft15a[11..11].out, ( sft15a[10..10].out, ( sft15a[9..9].out, ( sft15a[8..8].out, ( sft15a[7..7].out, ( sft15a[6..6].out, ( sft15a[5..5].out, ( sft15a[4..4].out, ( sft15a[3..3].out, ( sft15a[2..2].out, ( sft10a[3..3].out, ( sft10a[2..2].out, ( data[19..19], ( data[18..18], ( data[17..16]))))))))))))))))))))))))))))));
	sft40a[].in = add36_result[];
	sft4a[].in = ( w417w, ( w417w, ( sft10a[26..26].out, ( sft15a[23..23].out, ( sft15a[22..22].out, ( sft20a[19..19].out, ( sft20a[18..18].out, ( sft20a[17..17].out, ( sft20a[16..16].out, ( sft20a[15..15].out, ( sft20a[14..14].out, ( sft20a[13..13].out, ( sft20a[12..12].out, ( sft20a[11..11].out, ( sft20a[10..10].out, ( sft20a[9..9].out, ( sft20a[8..8].out, ( sft20a[7..7].out, ( sft20a[6..6].out, ( sft20a[5..5].out, ( sft20a[4..4].out, ( sft20a[3..3].out, ( sft20a[2..2].out, ( sft20a[1..1].out, ( sft20a[0..0].out, ( sft15a[1..1].out, ( sft15a[0..0].out, ( sft10a[1..1].out, ( sft10a[0..0].out, ( data[32..32], w417w))))))))))))))))))))))))))))));
	sft5a[].in = add1_result[];
	sft7a[].in = ( w417w, ( w417w, ( data[223..223], ( data[252..252], ( data[236..236], ( data[220..220], ( data[204..204], ( data[203..203], ( data[217..217], ( data[156..156], ( data[140..140], ( data[124..124], ( data[108..108], ( data[92..92], ( data[76..76], ( data[60..60], ( data[59..59], ( data[58..58], ( data[57..57], ( data[56..56], ( data[55..55], ( data[54..54], ( data[53..53], ( data[52..52], ( data[51..51], ( data[50..50], ( data[49..48])))))))))))))))))))))))))));
	sft8a[].in = ( w417w, ( w417w, ( data[238..238], ( data[237..237], ( data[221..221], ( data[205..205], ( data[189..189], ( data[173..173], ( data[142..142], ( data[141..141], ( data[125..125], ( data[109..109], ( data[93..93], ( data[77..77], ( data[61..61], ( sft25a[6..6].out, ( data[44..44], ( data[43..43], ( data[42..42], ( data[41..41], ( data[40..40], ( data[39..39], ( data[38..38], ( data[37..37], ( data[36..36], ( data[35..35], ( data[34..33])))))))))))))))))))))))))));
	sft9a[].in = ( w417w, ( w417w, ( w417w, ( data[207..207], ( data[251..251], ( data[235..235], ( data[219..219], ( sft25a[14..14].out, ( sft25a[13..13].out, ( sft25a[12..12].out, ( sft25a[11..11].out, ( sft25a[10..10].out, ( sft25a[9..9].out, ( sft25a[8..8].out, ( sft25a[7..7].out, ( sft30a[4..4].out, ( sft25a[5..5].out, ( sft25a[4..4].out, ( sft25a[3..3].out, ( sft25a[2..2].out, ( sft25a[1..1].out, ( sft25a[0..0].out, ( data[68..68], ( data[67..67], ( data[66..66], ( data[65..65], ( data[64..64], w417w)))))))))))))))))))))))))));
	result[31..0] = w981w[31..0];
	w417w = B"0";
	w981w[] = ( sft5a[30..29].out, sft5a[28..27].out, sft5a[26..25].out, sft5a[24..23].out, sft5a[22..21].out, sft5a[20..19].out, sft5a[18..17].out, sft5a[16..15].out, sft5a[14..13].out, sft5a[12..11].out, sft5a[10..9].out, sft5a[8..7].out, sft5a[6..5].out, sft5a[4..3].out, sft5a[2..1].out, sft5a[0..0].out, data[0..0]);
END;
--VALID FILE
