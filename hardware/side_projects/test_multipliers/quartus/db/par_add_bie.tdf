--parallel_add DEVICE_FAMILY="Cyclone V" MSW_SUBTRACT="NO" PIPELINE=0 REPRESENTATION="SIGNED" RESULT_ALIGNMENT="LSB" SHIFT=1 SIZE=12 WIDTH=12 WIDTHR=24 data result
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:09:SJ cbx_lpm_add_sub 2018:09:12:13:04:09:SJ cbx_mgl 2018:09:12:14:15:07:SJ cbx_nadder 2018:09:12:13:04:09:SJ cbx_padd 2018:09:12:13:04:09:SJ cbx_parallel_add 2018:09:12:13:04:09:SJ cbx_stratix 2018:09:12:13:04:09:SJ cbx_stratixii 2018:09:12:13:04:09:SJ cbx_util_mgl 2018:09:12:13:04:09:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.


FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 156 
SUBDESIGN par_add_bie
( 
	data[143..0]	:	input;
	result[23..0]	:	output;
) 
VARIABLE
	add1_result[22..0]	:	WIRE;
	add11_result[14..0]	:	WIRE;
	add16_result[10..0]	:	WIRE;
	add21_result[6..0]	:	WIRE;
	add26_result[2..0]	:	WIRE;
	add6_result[18..0]	:	WIRE;
	sft10a[18..0] : soft;
	sft12a[14..0] : soft;
	sft13a[14..0] : soft;
	sft14a[14..0] : soft;
	sft15a[14..0] : soft;
	sft17a[10..0] : soft;
	sft18a[10..0] : soft;
	sft19a[10..0] : soft;
	sft20a[10..0] : soft;
	sft22a[6..0] : soft;
	sft23a[6..0] : soft;
	sft24a[6..0] : soft;
	sft25a[6..0] : soft;
	sft27a[2..0] : soft;
	sft28a[2..0] : soft;
	sft29a[2..0] : soft;
	sft2a[22..0] : soft;
	sft30a[2..0] : soft;
	sft3a[22..0] : soft;
	sft4a[22..0] : soft;
	sft5a[22..0] : soft;
	sft7a[18..0] : soft;
	sft8a[18..0] : soft;
	sft9a[18..0] : soft;
	w237w	: WIRE;
	w249w	: WIRE;
	w555w[23..0]	: WIRE;

BEGIN 
	add1_result[] = sft2a[].out + sft3a[].out + sft4a[].out;
	add11_result[] = sft12a[].out + sft13a[].out + sft14a[].out;
	add16_result[] = sft17a[].out + sft18a[].out + sft19a[].out;
	add21_result[] = sft22a[].out + sft23a[].out + sft24a[].out;
	add26_result[] = sft27a[].out + sft28a[].out + sft29a[].out;
	add6_result[] = sft7a[].out + sft8a[].out + sft9a[].out;
	sft10a[].in = add6_result[];
	sft12a[].in = ( w249w, ( (! data[95..95]), ( data[138..138], ( data[126..126], ( data[114..114], ( data[102..102], ( data[101..101], ( data[89..89], ( data[66..66], ( data[65..65], ( data[64..64], ( data[63..63], ( data[62..62], ( data[61..60]))))))))))))));
	sft13a[].in = ( w249w, ( w249w, ( data[94..94], ( data[82..82], ( data[70..70], ( data[58..58], ( data[46..46], ( data[34..34], ( data[22..22], ( data[21..21], ( data[20..20], ( data[19..19], ( data[18..18], ( data[17..16]))))))))))))));
	sft14a[].in = ( w249w, ( w249w, ( (! data[83..83]), ( data[137..137], ( data[125..125], ( data[113..113], ( sft30a[2..2].out, ( sft30a[1..1].out, ( sft30a[0..0].out, ( data[76..76], ( data[75..75], ( data[74..74], ( data[73..73], ( data[72..72], w249w))))))))))))));
	sft15a[].in = add11_result[];
	sft17a[].in = ( w249w, ( (! data[71..71]), ( data[136..136], ( data[124..124], ( data[112..112], ( data[100..100], ( data[88..88], ( data[87..87], ( data[86..86], ( data[85..84]))))))))));
	sft18a[].in = ( w249w, ( w249w, ( (! data[59..59]), ( (! data[47..47]), ( (! data[35..35]), ( (! data[23..23]), ( (! data[11..11]), ( data[10..10], ( data[9..9], ( data[8..7]))))))))));
	sft19a[].in = ( w249w, ( w249w, ( data[92..92], ( data[135..135], ( data[123..123], ( data[111..111], ( data[99..99], ( data[98..98], ( data[97..97], ( data[96..96], w249w))))))))));
	sft20a[].in = add16_result[];
	sft22a[].in = ( w249w, ( data[80..80], ( data[134..134], ( data[122..122], ( data[110..110], ( data[109..108]))))));
	sft23a[].in = ( w249w, ( w249w, ( data[79..79], ( data[67..67], ( data[55..55], ( data[54..53]))))));
	sft24a[].in = ( w249w, ( w249w, ( data[90..90], ( data[133..133], ( data[121..121], ( data[120..120], w249w))))));
	sft25a[].in = add21_result[];
	sft27a[].in = ( w249w, ( data[78..78], data[132..132]));
	sft28a[].in = ( w249w, ( w249w, data[77..77]));
	sft29a[].in = ( w249w, ( w249w, w237w));
	sft2a[].in = ( w237w, ( (! data[143..143]), ( (! data[131..131]), ( data[141..141], ( data[118..118], ( data[106..106], ( sft10a[14..14].out, ( sft10a[13..13].out, ( sft10a[12..12].out, ( sft10a[11..11].out, ( sft10a[10..10].out, ( sft10a[9..9].out, ( sft10a[8..8].out, ( sft10a[7..7].out, ( sft10a[6..6].out, ( sft10a[5..5].out, ( sft10a[4..4].out, ( data[6..6], ( data[5..5], ( data[4..4], ( data[3..3], ( data[2..1]))))))))))))))))))))));
	sft30a[].in = add26_result[];
	sft3a[].in = ( w249w, ( w249w, ( data[142..142], ( data[130..130], ( sft10a[16..16].out, ( sft10a[15..15].out, ( sft15a[12..12].out, ( sft15a[11..11].out, ( sft15a[10..10].out, ( sft15a[9..9].out, ( sft15a[8..8].out, ( sft15a[7..7].out, ( sft15a[6..6].out, ( sft15a[5..5].out, ( sft15a[4..4].out, ( sft15a[3..3].out, ( sft15a[2..2].out, ( sft10a[3..3].out, ( sft10a[2..2].out, ( data[15..15], ( data[14..14], ( data[13..12]))))))))))))))))))))));
	sft4a[].in = ( w249w, ( w249w, ( sft10a[18..18].out, ( sft10a[17..17].out, ( sft15a[14..14].out, ( sft15a[13..13].out, ( sft20a[10..10].out, ( sft20a[9..9].out, ( sft20a[8..8].out, ( sft20a[7..7].out, ( sft20a[6..6].out, ( sft20a[5..5].out, ( sft20a[4..4].out, ( sft20a[3..3].out, ( sft20a[2..2].out, ( sft20a[1..1].out, ( sft20a[0..0].out, ( sft15a[1..1].out, ( sft15a[0..0].out, ( sft10a[1..1].out, ( sft10a[0..0].out, ( data[24..24], w249w))))))))))))))))))))));
	sft5a[].in = add1_result[];
	sft7a[].in = ( w249w, ( (! data[119..119]), ( data[140..140], ( data[128..128], ( data[116..116], ( data[104..104], ( data[103..103], ( data[91..91], ( data[68..68], ( data[56..56], ( data[44..44], ( data[43..43], ( data[42..42], ( data[41..41], ( data[40..40], ( data[39..39], ( data[38..38], ( data[37..36]))))))))))))))))));
	sft8a[].in = ( w249w, ( w249w, ( data[129..129], ( data[117..117], ( data[105..105], ( data[93..93], ( data[81..81], ( data[69..69], ( data[57..57], ( data[45..45], ( data[33..33], ( data[32..32], ( data[31..31], ( data[30..30], ( data[29..29], ( data[28..28], ( data[27..27], ( data[26..25]))))))))))))))))));
	sft9a[].in = ( w249w, ( w249w, ( (! data[107..107]), ( data[139..139], ( data[127..127], ( data[115..115], ( sft25a[6..6].out, ( sft25a[5..5].out, ( sft25a[4..4].out, ( sft25a[3..3].out, ( sft25a[2..2].out, ( sft25a[1..1].out, ( sft25a[0..0].out, ( data[52..52], ( data[51..51], ( data[50..50], ( data[49..49], ( data[48..48], w249w))))))))))))))))));
	result[23..0] = w555w[23..0];
	w237w = B"1";
	w249w = B"0";
	w555w[] = ( sft5a[22..21].out, sft5a[20..19].out, sft5a[18..17].out, sft5a[16..15].out, sft5a[14..13].out, sft5a[12..11].out, sft5a[10..9].out, sft5a[8..7].out, sft5a[6..5].out, sft5a[4..3].out, sft5a[2..1].out, sft5a[0..0].out, data[0..0]);
END;
--VALID FILE
